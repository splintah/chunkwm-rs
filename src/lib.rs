//! # chunkwm-rs [![Build Status](https://travis-ci.org/splintah/chunkwm-rs.svg?branch=master)][travis]
//!
//! A Rust 'bridge' for creating [chunkwm] plugins.
//!
//! ## Features
//!
//! - Event handler.
//! - Easy API.
//! - `CVar` support.
//! - Subscriptions.
//! - Border methods (feature `border`, see [Cargo features](#cargo-features)).
//! - Accessibility methods (feature `accessibility`, see [Cargo features](#cargo-features)).
//!
//! ## Usage
//!
//! Add the following your `Cargo.toml`:
//!
//! ```toml
//! [dependencies]
//! chunkwm = { git = "https://github.com/splintah/chunkwm-rs" }
//! ```
//!
//! You then have to compile it as a `cdylib`, and use the `plugin.cpp` file from the [Rust plugin template](https://github.com/splintah/chunkwm-rs-template).
//!
//! If you want to get the `Makefile` template and a small Rust library template, see the [Rust plugin template](https://github.com/splintah/chunkwm-rs-template).
//!
//! ## Documentation
//!
//! You can view the documentation at [https://splintah.github.io/chunkwm-rs/master/chunkwm/][docs].
//! The documentation is automatically generated by Travis.
//!
//! ## Cargo features
//!
//! There are two features that toggle the compilation of the C/C++ library: `border` and `accessibility`:
//!
//! - The `border` features gives you access to the `chunkwm::common::border` path.
//! - The `accessibility` features gives you access to the `chunkwm::common::accessibility` path, and enables some extra methods on `Window` and `Application`.
//!
//! To use these features:
//!
//! ```toml
//! [dependencies]
//! chunkwm = { git = "https://github.com/splintah/chunkwm-rs", features = ["border", "accessibility"] }
//! ```
//!
//! You can, of course, only use the features you're interested in.
//!
//! [Rust plugin template]: https://github.com/splintah/chunkwm-rs-template
//! [chunkwm]: https://github.com/koekeishiya/chunkwm
//! [travis]: https://travis-ci.org/splintah/chunkwm-rs
//! [docs]: https://splintah.github.io/chunkwm-rs/master/chunkwm/

extern crate core_foundation;
extern crate core_graphics;

/// The error type that is used for functions that return a `Result`.
#[derive(Debug)]
pub enum ChunkWMError {
    /// The raw pointer is outlived.
    NullPointer,
    /// A `CVar` cannot be found.
    CVarNotFound(&'static str),
    /// Something could not be parsed from a string.
    ParseError(&'static str),
    /// An error occured in a chunkwm function.
    Internal(&'static str),
}

use std::fmt;
use std::error::Error;
impl fmt::Display for ChunkWMError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ChunkWMError: {:?}", self)
    }
}

impl Error for ChunkWMError {
    fn description(&self) -> &str {
        match *self {
            ChunkWMError::NullPointer => "The raw pointer is outlived.",
            ChunkWMError::CVarNotFound(_) => "A `CVar` cannot be found.",
            ChunkWMError::ParseError(_) => "Something could not be parsed from a string.",
            ChunkWMError::Internal(_) => "An error occured in a chunkwm function.",
        }
    }
}

pub mod common;

mod bridge;
pub use bridge::*;

mod raw;
pub use raw::*;

#[macro_use]
mod macros;

pub mod prelude;
