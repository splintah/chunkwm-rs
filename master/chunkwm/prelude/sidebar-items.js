initSidebarItems({"enum":[["Event","The `Event` enum allows for easy pattern matching on events."],["LogLevel","The `LogLevel` defines how something should be logged for chunkwm. See the chunkwm readme."],["Subscription","The `Subscription` enum is used to subscribe to chunkwm events."],["WindowFlag","The flags on a `Window`."]],"struct":[["API","The `API` struct is a raw type (i.e. the same as used in C code), and contains methods for creating, finding, and getting `CVar`s."],["Application","The `Application` struct."],["CVar","The `CVar` struct allows you to easily create a handle to `CVars`, that might be updated. You can use all types that implement `Display` and `FromStr` as value type for the `CVar`. You can therefore easily implement your own `CVar` compatible types."],["NumericBool","The `NumericBool` is often used in a chunkwm config. It is a boolean type that is either 0 or 1 (false or true respectively). This struct allows you to create a `CVar` that is a numeric bool, and easily get its value."],["Payload","The `Payload` struct."],["ProcessSerialNumber","The process serial number. Both used as a raw type and as a Rust type."],["RawApplication","The raw application representation. This is used in the C/C++ plugin, and shouldn't really be necessary for you to use in your Rust code."],["RawDisplay","The raw `Display`."],["RawObserver","The raw observer."],["RawPayload","The raw payload representation. This is used in the C/C++ plugin, and shouldn't really be necessary for you to use in your Rust code."],["RawSpace","The raw `Space`."],["RawWindow","The raw window representation. This is used in the C/C++ plugin, and shouldn't really be necessary for you to use in your Rust code."],["Window","The `Window` struct."]],"trait":[["HandleEvent","The `HandleEvent` trait should be implemented on your Plugin struct."]],"type":[["AXError","An error type. This is not often used in Rust code."],["AXUIElementRef","The reference to UI elements."],["ApplicationRef","A reference to an `RawApplication`."],["CGSSpaceID",""],["CGSSpaceType",""],["DisplayID","The display identifier."],["DisplayRef","A reference to a `RawDisplay`."],["PID","The process identifier type."],["PayloadRef","A reference to a `RawPayload`."],["SpaceRef","A reference to a `RawSpace`."],["WindowRef","A reference to a `RawWindow`."]]});