initSidebarItems({"macro":[["create_c_bridge","This macro creates the bridge to the C/C++ plugin. When writing a handler this should always be done. You should pass your plugin struct's identifier to this macro."],["name","A macro to specify the plugin's name."],["subscribe","This macro makes it easy to subscribe to events."],["subscribe_all","A macro to subscribe to all events."],["version","A macro to specify the plugin's version."]],"mod":[["api","The `api` module contains the raw `chunkwm_api` struct, and contains a `CVar` struct to create a handle to a specific `CVar`."],["application","This module contains the application type and its implementations."],["common",""],["event","This module contains types and traits for event handling."],["payload","This module contains the payload type and its implementations."],["prelude","The prelude `use`s all important types for easy importing. Just `use chunkwm::prelude::*` to import these."],["window","This module contains the window type and its implementations."]],"struct":[["ProcessSerialNumber","The process serial number. Both used as a raw type and as a Rust type."],["RawApplication","The raw application representation. This is used in the C/C++ plugin, and shouldn't really be necessary for you to use in your Rust code."],["RawObserver","The raw observer."],["RawPayload","The raw payload representation. This is used in the C/C++ plugin, and shouldn't really be necessary for you to use in your Rust code."],["RawWindow","The raw window representation. This is used in the C/C++ plugin, and shouldn't really be necessary for you to use in your Rust code."]],"type":[["AXError",""],["AXUIElementRef",""],["ApplicationRef",""],["PID",""],["PayloadRef",""],["WindowRef",""]]});